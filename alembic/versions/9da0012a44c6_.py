"""empty message

Revision ID: 9da0012a44c6
Revises: 
Create Date: 2024-04-29 18:24:20.529027

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9da0012a44c6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    
    op.create_table('organisation',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cryptographic_seed', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cover_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('webhook_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_did_in_registry', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_onboarding_as_ti_in_progress', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_onboarded_as_ti', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verifiable_authorisation_to_onboard', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verifiable_accreditation_to_attest', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verifiable_authorisation_for_trust_chain', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_onboarding_as_tao_in_progress', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_onboarded_as_tao', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_onboarding_as_root_tao_in_progress', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_onboarded_as_root_tao', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verifiable_accreditation_to_accredit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organisation_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('data_agreement',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('credential_types', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('data_attributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('exchange_mode', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name='data_agreement_organisation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='data_agreement_pkey')
    )
    
    op.create_table('v2_data_agreement',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisationId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('purpose', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('purposeDescription', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('dataAttributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('methodOfUse', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('limitedDisclosure', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('credentialTypes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisationId'], ['organisation.id'], name='v2_data_agreement_organisationId_fkey'),
    sa.PrimaryKeyConstraint('id', name='v2_data_agreement_pkey')
    )
    op.create_table('migration',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('isApplied', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='migration_pkey'),
    sa.UniqueConstraint('name', name='migration_name_key')
    )

    op.create_table('credential_revocation_status_list',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('encoded_status_list', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_assigned_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='credential_revocation_status_list_pkey')
    )
    
    op.create_table('credential_offer',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('data_agreement_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_accessed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('data_attribute_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('issuance_mode', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_pre_authorised', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('offer_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('credential_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('issuer_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorisation_request_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id_token_request_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id_token_request', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorisation_code_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('vp_token_request_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('vp_token_request', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('vp_token_qr_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('vp_token_response', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('issuer_qr_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code_challenge', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code_challenge_method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('redirect_uri', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('acceptance_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorisation_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pre_authorised_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_pin', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('did', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trusted_issuer_attribute_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trusted_accreditation_organisation_attribute_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('supports_revocation', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_revoked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('credential_revocation_status_list_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('credential_revocation_status_list_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('trust_framework', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['credential_revocation_status_list_id'], ['credential_revocation_status_list.id'], name='credential_offer_credential_revocation_status_list_id_fkey'),
    sa.ForeignKeyConstraint(['data_agreement_id'], ['data_agreement.id'], name='credential_offer_data_agreement_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='credential_offer_pkey')
    )

    op.create_table('issue_credential_record',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('dataAgreementId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organisationId', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('dataAttributeValues', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('issuanceMode', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('isPreAuthorised', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('credentialStatus', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('acceptanceToken', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('issuerState', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorisationRequestState', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('idTokenRequestState', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('idTokenRequest', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorisationCodeState', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authorisationCode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('preAuthorisedCode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('userPin', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('clientId', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('codeChallenge', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('codeChallengeMethod', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('redirectUri', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('did', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('isAccessed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dataAgreementId'], ['v2_data_agreement.id'], name='issue_credential_record_dataAgreementId_fkey'),
    sa.ForeignKeyConstraint(['organisationId'], ['organisation.id'], name='issue_credential_record_organisationId_fkey'),
    sa.PrimaryKeyConstraint('id', name='issue_credential_record_pkey')
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('migration')
    op.drop_table('issue_credential_record')
    op.drop_table('v2_data_agreement')
    op.drop_table('credential_offer')
    op.drop_table('credential_revocation_status_list')
    op.drop_table('data_agreement')
    op.drop_table('organisation')
    # ### end Alembic commands ###
